# Page localized URL segment (slug) in (translatable) human readable format. 
# This key will be transformed when used in URLs. For example "About Us" will become "about-us".
# All characters will be lowercased and all spaces will be replaced by dashes.
exampleApp.jsxTest.slug = JSX Tests
# Base test: one JSX element
exampleApp.jsxTest.baseTest1 = This is a <link>simple link</link>.
# Base test: two child elements inside another element
exampleApp.jsxTest.baseTest2 = This is a <link>link with <strong>bold</strong> and <i>italic</i></link>
# Plural + JSX test
exampleApp.jsxTest.plural = {count, plural, =0 {No <strong>candy</strong> left.} one {Got # <i>candy</i> left.} other {Got <u>#</u> candies left.}}
# Escape test: `formatJsx` using '<', '>', '{', '}' and quotes
exampleApp.jsxTest.escapeTest = This message <strong>should</strong> render with 3 quotes ('''), greater than (&#x3c; &#x3C;) and lower than (&#x3e; &#x3E;) characters as well as curly brackets (&#x7b; &#x7B; &#x7d; &#x7D;).
# Test that JSX elements can support style and events
exampleApp.jsxTest.styleAndEvents = This message should have <strong>style</strong> and <link>events</link> on its JSX elements.
# This will use in the console log when the mouse goes over the link of the previous test
exampleApp.jsxTest.styleAndEventsConsole = Mouseover console event.

# Missing closing XML tag
exampleApp.jsxTest.missingClose1 = This message <strong>should not render because it is missing a closing XML tag
# Missing closing XML tag at the end
exampleApp.jsxTest.missingClose2 = This message should not render because it is missing a closing XML tag<strong>
# Missing closing XML tag at the beginning
exampleApp.jsxTest.missingClose3 = <strong>This message should not render because it is missing a closing XML tag
# Missing closing embedded XML tag
exampleApp.jsxTest.missingClose4 = This message <strong>should not render <i>because it is missing</strong> a closing XML tag
# Missing closing embedded XML tag at the end tag 
exampleApp.jsxTest.missingClose5 = This message <strong>should not render because it is missing<i></strong> a closing XML tag
# Missing closing embedded XML tag at the end tag
exampleApp.jsxTest.missingClose6 = This message <strong><i>should not render because it is missing</strong> a closing XML tag
# Missing closing embedded XML tag at the end tag (multi)
exampleApp.jsxTest.missingClose7 = This message <strong><i>should not render because it is missing<i1></i1><i2></strong> a closing XML tag

# Missing opening XML tag
exampleApp.jsxTest.missingOpen1 = This message </strong>should not render because it is missing an opening XML tag
# Missing opening XML tag at the end
exampleApp.jsxTest.missingOpen2 = This message should not render because it is missing an opening XML tag</strong>
# Missing opening XML tag at the beginning
exampleApp.jsxTest.missingOpen3 = </strong>This message should not render because it is missing an opening XML tag
# Missing opening embedded XML tag
exampleApp.jsxTest.missingOpen4 = This message <strong>should not render </i>because it is missing</strong> an opening XML tag
# Missing opening embedded XML tag at the end tag 
exampleApp.jsxTest.missingOpen5 = This message <strong>should not render because it is missing</i></strong> an opening XML tag
# Missing opening embedded XML tag at the end tag
exampleApp.jsxTest.missingOpen6 = This message <strong><i>should not render because it is missing</strong> an opening XML tag
# Missing opening embedded XML tag at the end tag (multi)
exampleApp.jsxTest.missingOpen7 = This message <strong><i>should not render because it is missing<i1></i1></i2></strong> an opening XML tag

# Invalid XML tags
exampleApp.jsxTest.invalidXml1 = This <strong-tag>message</strong-tag> should not render because it contains a tag with an invalid name
exampleApp.jsxTest.invalidXml2 = This <span class="bad">message</span> should not render because the XML tag contains an attribute

# Duplicate tag
exampleApp.jsxTest.duplicateTags = This <strong>message</strong> should not render because there are two <strong>XML</strong> tags with the same name

# Invalid message value
exampleApp.jsxTest.badMessageValue1 = This <strong>message</strong> should not render because a value with the wrong type was provided instead of a JSX element
exampleApp.jsxTest.badMessageValue2 = This {message} should not render because JSX was provided instead of a variable value

# Bad JSX element
exampleApp.jsxTest.badJsxElement1 = This <strong>message</strong> should not render because the JSX element provided has multiple children at the same level
exampleApp.jsxTest.badJsxElement2 = This <strong>message</strong> should not render because the JSX element contained a message
